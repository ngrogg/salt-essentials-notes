[[index|back]]

= Chapter 3: Execution Modules: The functional foundation =
== sys: Information and Documentation about modules ==
List modules and functions loaded.

=== sys.doc Basic Documentation ===
sys.doc will list the docstrings in each function.
Python docstrings are similar to javadoc.
Use either the salt CLI on the master with a list of minions or the salt-call CLI on the minion.
`sudo salt master.example sys.doc test.ping
test.ping:
  Used to make sure the minion is up and responding. Not an ICMP ping.
  Returns 'True'.
  CLI Example:
    salt '*' test.ping`

sys.doc function takes name of a function or module as arguments.
To see all functions in a module give sys.doc an argument of test:
`sudo salt-call sys.doc test
local:
  ------
  test.arg
    Printout the data passed into the function '*args' ...`

To see documentation for all the modules on the system run sys.doc without any argument.
Documentation from python code itself not a set of files.

=== sys.list_modules, sys.list_functions: Simple Listings ===
Functions aimed at providing higher level view of the modules and functions available.
Two modules:
`sys.list_modules
sys.list_functions`

Take a modules name as arguments.
No argument lists all modules or functions on minion:
`sudo salt-call sys.list_modules
local:
  - acl
  - aliases
sudo salt-call sys.list_functions sys
local:
  - sys.argspec
  - sys.doc
  - sys.list_functions
  - sys.list_modules`

sys.argspec will list arguments and default vaules for each function.

== cmd: Execute Via a Shell ==
Powerful but insecure module to run a command as root on a minion.

=== cmd.run: Run Any Command ===
Most straightforward cmd command. Run a command on every minion as if typing it in a normal shell.
Example:
`sudo salt \* cmd.run 'grep root /etc/passwd'
minion3.example:
  root:x:0:0:root:/root:/bin/bash
minion2.example:
  root:x:0:0:root:/root:/bin/bash
  operator:x:11:0:operator:/root:/sbin/nologin`

Keyword arguments
cmd.run can change current working directory with cwd keyword:
`sudo salt-call cmd.run 'pwd'
local:
  /root
sudo salt-call cmd.run cwd=/usr 'pwd'
local:
  /usr`

Salt daemons usually run as root. Use runas argument to run as another user:
`sudo salt master\* cmd.run whoami runas=vagrant
master.example:
  vagrant`

env keyword sets and environmental variable.
Needs a key equal to a value.
Set env=key=value.
Use YAML and pass to env keyword:
`sudo salt-call cme.run env='{foo: bar}' 'echo $foo'
[INFO ] Executing command 'echo $foo' in directory '/root'
local:
  bar`

Salt uses YAML at its core, when it doubt try arguments as YAML.
Use a YAML checker,
https://yaml-online-parser.appspot.com/

== pkg: Manage Packages ==
Four servers, two production, two development
Web and database servers.
Want to install nginx on the web servers and MySQL on the database server
Staging/dev servers have web/database on same servers
minion1: production web
minion2: production database
minion3: staging server
minion4: development server

=== Virtual Modules ===
Abstracts package managers into one module, salt refers to as a "virtual module".
Module in name only.
Code used is in other modules.

sys.list_functions, run on a CentOS and Ubuntu host:
`sudo salt -L master.example,minion4.example sys.list_functions pkg
master.example:
  - pkg.available_version
  - pkg.check_db
  - pkg.clean_metadata
  - pkg.del_repo
<snip>
  - pkg.upgrade_available
  - pkg.verify
  - pkg.version
minion4.example:
  - pkg.available_version
  - pkg.del_repo
<snip>
  - pkg.upgrade_available
  - pkg.version
  - pkg.version_cmp`

Differences due to package manager
CentOS specific: `pkg.check_db`
Ubuntu specific: `pkg.version_cmp`

Different salt modules that wrap functionality of each package manager.

Salt doesn't hide differences within python code.
Two modules: `yumpkg.py` and `aptpkg.py`.
Both listed as "pkg" for simplicity.

=== pkg.list_pkgs: List All Installed Packages ===
List all install packages on systems:
`sudo salt \* pkg.list_pkgs`
Underlying code is different, command to run is the same.

=== pkg.available_version: See What Version Will Be Installed ===
Check what version of package nginx would be installed on hosts:
`sudo salt \* pkg.available_version nginx`

=== pkg.install: Install Packages ===
Install nginx on a single host `minion1`:
`sudo salt minion1.example pkg.install nginx`

Validate:
`sudo salt minion1.example pkg.version nginx`

== user: Manage Users ==
Four users, different roles and scopes
wilma, DBA
fred, Developer
barney, Developer and QA
bettey, Developer and QA

=== user.add: Add Users ===
Add a single user using `user.add`:
`sudo salt minion2.example user.add wilma`

Verify:
`sudo salt minion2.example cmd.run 'grep wilma /etc/passwd'`

=== user.list_users,user.info: Get User Info ===
Rather than using cmd.run, verify users with `user.list_users`:
`sudo salt minion2.example user.list_users`

Not as informative as grepping passwd file.
Use `user.info` to get additional info:
`sudo salt minion2.example user.info wilma`

Uses basic system utilities wrapped in salt, similar to pkg.

== saltutil: Access Various Salt Utilities ==
Salt specific utilities.
Useful when something specific needs updated:
`sudo salt-call sys.list_functions saltutil | grep sync
  - saltutil.sync_all
  - saltutil.sync_grains
  - saltutil.sync_modules
  - saltutil.sync_outputters
  - saltutil.sync_renderers
  - saltutil.sync_returners
  - saltutil.sync_states
  - saltutil.sync_utils`

Next to cover is `saltutil.sync_modules`.
Syncs modules. Pulls in changes.

View long running jobs.
Start long job:
`sudo salt master.example cmd.run 'sleep 100'`

Look for job with saltutil:
`sudo salt master.example saltutil.running`

Will return a JID among other info
Can kill by job ID (JID) if desired:
`sudo salt master.example saltutil.kill_job JID`
