[[index|back]]

= Chapter 1: Introduction =
== What is Salt? ==
Salt is a remote execution framework and configuration management system.
Written in Python and configured with YAML by default. This can be changed.

== High-Level Architecture ==
Hosts are minions.
Actions performed on them are called from the "master" server.
Client/Master model.
Salt runs as a daemon on both the master and minion servers.
Each minion has an ID and each ID must be unique.
Master [[sends]] or "publishes" events.
Minions receive or "subscribe" to events.
Publish and Subscribe, Pub-Sub.
Master has two ports for publish.
Default is 4505 and 4506.
Salt states are a way to manage configurations across all minions.
State has requirements listed.
Communication done via secure encrypted channel.
Minions do not have global secrets.

Declarative Vs. Imperative configuration management.
Imperative give Salt an ordered list of actions to perform.
Declarative give Salt a desired end state.

== Examples ==
=== System Management ===
Common use is to install packages
Example: `salt '*' pkg.install apache`
Install Apache on all hosts
To target based on host use info data from host.
Info data referred to as "grains".
Grains are returned from minions, "pillar data" is stored on the master.
Minions can only see their own pillar data.
Minion tells master it's grains, asks master for pillar data.

=== Configuration Mangement ===
Master can distribute files that describe how a system should be configured.
Called "states", stored in YAML files called SLS "salt states".
Example state to manage Apache might look like:
`webserver_main_index_file:
  file.managed:
    - name: /var/www/index.html
    - source: salt://webserver/main.html`

First line is an indentifier followed by a command to enforce.
Description says file is managed by Salt.
Source of file is on Salt Master in location given.
Salt can manage files it needs. Config files, java WAR files or even Windows installers.
Next two lines describe where the file should end up and where to find the file on the master.
Path is relative to the "file root" for the master.
Source is not the absolute file path.

Salt comes with built in state modules that help create descriptions to define host configuration.
Definitions include users, services and packages.

== Brief history ==
Remote execution tool based on ZeroMQ messaging layer.
State system added later.
Designed to be extensible.
Name comes from the idiom: "salt makes everything better".

== Topology Options ==
Minions can have a single master or an intermediate host called a "syndication master".
Useful for servers in different geographic regions.
Alternatively can have a "masterless minion".
Also have a "peer publisher" system that doesn't have direct access to master.
Allows devs to run commands without having access to entire Salt toolkit.

== Extending Salt ==
Dynamically generate config files using templating engines like Jinja or Mako
Use a DSL or YAML
or code using modules ala Python
Create own states and even add own renderer to convert data files into data structures
Grains and pillars can be customized.
